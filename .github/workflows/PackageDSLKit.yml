name: PackageDSLKit
on:
  push:
    branches-ignore:
      - '*WIP'
env:
  PACKAGE_NAME: PackageDSLKit      
jobs:
  build-ubuntu:
    name: Build on Ubuntu
    env:
      SWIFT_VER: 6.0
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    runs-on: ubuntu-latest
    container:
      image: swift:6.0-noble
    steps:
      - uses: actions/checkout@v4
      - name: Cache swift package modules
        id: cache-spm-linux
        uses: actions/cache@v4
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.swift-version }}-
            ${{ runner.os }}-${{ env.cache-name }}-
      - name: Test
        run: swift test --enable-code-coverage 
      - uses: sersoft-gmbh/swift-coverage-action@v4
        id: coverage-files
        with:          
          fail-on-empty-output: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4       
        with:
          fail_ci_if_error: true
          flags: swift-${{ matrix.swift-version }},ubuntu
          verbose: true        
          token: ${{ secrets.CODECOV_TOKEN }}  
          files: ${{ join(fromJSON(steps.coverage-files.outputs.files), ',') }}    
  build-macos:
    name: Build on macOS
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        include:
          - xcode: "/Applications/Xcode_16.1.app"
            os: macos-14
            iOSVersion: "18.1"
            watchOSVersion: "11.0"
            watchName: "Apple Watch Series 9 (41mm)"
            iPhoneName: "iPhone 15"
    steps:
      - uses: actions/checkout@v4
      - name: Cache swift package modules
        id: cache-spm-macos
        uses: actions/cache@v4
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: ${{ matrix.os }}-build-${{ env.cache-name }}-${{ matrix.xcode }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ env.cache-name }}-${{ matrix.xcode }}-
      - name: Cache mint
        if: startsWith(matrix.xcode,'/Applications/Xcode_16.1')
        id: cache-mint
        uses: actions/cache@v4
        env:
          cache-name: cache-mint
        with:
          path: .mint
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Set Xcode Name
        run: echo "XCODE_NAME=$(basename -- ${{ matrix.xcode }} | sed 's/\.[^.]*$//' | cut -d'_' -f2)" >> $GITHUB_ENV
      - name: Setup Xcode
        run: sudo xcode-select -s ${{ matrix.xcode }}/Contents/Developer || (sudo ls -1 /Applications | grep "Xcode")
      - name: Enable Swift Testing
        run: |
          mkdir -p ~/Library/org.swift.swiftpm/security/        
          cp macros.json ~/Library/org.swift.swiftpm/security/        
      - name: Install mint
        if: startsWith(matrix.xcode,'/Applications/Xcode_16.1')
        run: |
          brew update
          brew install mint
      - name: Build
        run: swift build
      - name: Run Swift Package tests
        run: swift test --enable-code-coverage
      - uses: sersoft-gmbh/swift-coverage-action@v4
        id: coverage-files-spm
        with:          
          fail-on-empty-output: true
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4        
        with:
          files: ${{ join(fromJSON(steps.coverage-files-spm.outputs.files), ',') }} 
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: macOS,${{ env.XCODE_NAME }},${{ matrix.runs-on }}
  build-docc:
    name: Build DocC
    #needs: [build-macos, build-ubuntu]
    runs-on: ubuntu-latest
    container:
      image: swift:6.0-noble
      volumes:
        - ${{ github.workspace }}:/workspace
    steps:
      - uses: actions/checkout@v4
      - name: Cache swift package modules
        id: cache-spm-linux
        uses: actions/cache@v4
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.swift-version }}-
            ${{ runner.os }}-${{ env.cache-name }}-
      - name: Build DocC
        run: swift package generate-documentation --platform "name=macos,version=15.1" --transform-for-static-hosting --hosting-base-path "swift-docc" --disable-indexing --enable-experimental-combined-documentation
      - name: Package DocArchive
        working-directory: .build/plugins/Swift-DocC/outputs
        run: tar -cf PackageDSLKit.doccarchive.tar PackageDSLKit.doccarchive
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          path: /workspace/.build/plugins/Swift-DocC/outputs/PackageDSLKit.doccarchive.tar
          retention-days: 1
      - uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PACKAGEDSL_TOKEN }}
          repository: brightdigit/PackageDSLDocs
          event-type: docc-update
          client-payload: '{"run_id": "${{ github.run_id }}"}' 
